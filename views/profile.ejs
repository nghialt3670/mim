<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles.css">
  <title><%= profile.username %>'s profile</title>
</head>
<body>
  <%- include('sidebar.ejs') %>
  <div class="profile">
    <button id="sidebar-toggle-btn" onclick="toggleSidebar()">
      <img src="/images/menu_icon.png" alt="">
    </button>
    <div class="post-list">
      <div id="profile-container" class="container">
        <img class="avatar" src="<%= profile.avatar ? 'data:' + profile.avatar.imageContentType + ';base64,' + (profile.avatar.data ? profile.avatar.data.toString('base64') : '') : '' %>" alt="Avatar">
        <h4 class="username"><%= profile.username %></h4>
        <!-- <% if (isOwnProfile) { %>
        <div class="options">
          <button class="edit-btn">
            <img src="/images/edit_icon.png" alt="">
          </button>
        </div>
        <% } %> -->
      </div>
      <% if (profile.posts.length > 0) { %>
        <ul>
          <% profile.posts.forEach(post => { %>
            <li id="<%= post.id %>" class="post">
              <div class="post-header">
                <div class="avatar-username">
                  <img class="avatar" src="<%= post.avatar ? 'data:' + post.imageContentType + ';base64,' + (post.avatar.data ? post.avatar.data.toString('base64') : '') : '' %>" alt="Avatar">
                  <div class="username-container">
                    <a href="/profile/<%= post.author%>" class="username"><%= post.author %></a>
                    <div class="time"><%= helper.adjustTime(post.timeCreate) %></div>
                  </div>
                </div>
                <% if (isOwnProfile) { %>
                <div class="options">
                  <button class="edit-btn" onclick="handleEditPost('<%= post.id %>')">
                    <img src="/images/edit_icon.png" alt="">
                  </button>
                  <button class="remove-btn" onclick="handleRemovePost('<%= post.id %>')">
                    <img src="/images/remove_icon.png" alt="">
                  </button>
                </div>
                <% } %>
              </div>
              <p id="caption" contenteditable="false"><%= post.caption %></p>
              <img id="image" class="image" src="data:<%= post.image.contentType %>;base64,<%= post.image.data.toString('base64') %>" alt="Image">
              <div id="like">
                  <button id="like-btn" onclick="handleLike('<%= post.id %>', '<%= user.username %>')">
                    <% if (post.liked) { %>
                      <div>&#128514</div>
                    <% } else { %>
                      <div>&#128528</div>
                    <% } %>
                  </button>
                  <div class="likes-container">
                    <div>(</div>
                    <div id="num-likes"><%= post.numLikes %></div>
                    <div>&nbsp;haha)</div>
                    <div id="haha-emoji" class="no-display">&#128528</div>
                  </div>
              </div>
            </li>
          <% }) %>
        </ul>
      <% } %>
    </div>
  </div>
	<script>
    function setTime() {
      const currentTime = new Date();
      document.getElementById('timeCreate').value = currentTime.toISOString();
    }

    function toggleSidebar() {
      var sidebar = document.getElementById('sidebar');
      var newsfeed = document.getElementById('newsfeed');

      if (sidebar.style.left === "-3px") {
        sidebar.style.left = "-303px";
        newsfeed.style.marginLeft = "0";
      } else {
        sidebar.style.left = "-3px";
        newsfeed.style.marginLeft = "300px";
      }
    }

    function setNumLikes(postId) {
      var likedPost = document.getElementById(postId);
      var likeButton = likedPost.querySelector('#like-btn');
      var numLikesEntity = likedPost.querySelector('#num-likes');
      var emoji = likeButton.querySelector("div");
      var numLikes = numLikesEntity.innerHTML;
      var newLikeCount;

      if (emoji.innerHTML === document.getElementById('haha-emoji').innerHTML) {
        newLikeCount = Number(numLikes) + 1;
        emoji.innerHTML = '&#128514'
      } else {
        newLikeCount = Number(numLikes) - 1;
        emoji.innerHTML = '&#128528'
      }
      numLikesEntity.innerHTML = newLikeCount;
    }

    function handleLike(postId, username) {
      setNumLikes(postId)

      fetch('/update-like', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ postId: postId }),
      });
    }

    function togglePostOptions(postId) {
      var optionsMenu = document.getElementById('post-options-menu-' + postId);
      optionsMenu.style.display = optionsMenu.style.display === 'block' ? 'none' : 'block';

      // Close other open menus
      var allMenus = document.querySelectorAll('.post-options-menu');
      allMenus.forEach(menu => {
        if (menu.id !== 'post-options-menu-' + postId) {
          menu.style.display = 'none';
        }
      });
    }

    function handleEditPost(postId) {
      var postElement = document.getElementById(postId);
      var captionElement = postElement.querySelector('#caption');
      var editBtnElement = postElement.querySelector('.edit-btn')


      var tickIconPath = '/images/tick_icon.png';
      var editIconPath = '/images/edit_icon.png';
      var imageElement = editBtnElement.querySelector('img');

      if (imageElement.src.endsWith(editIconPath)) {
        imageElement.src = tickIconPath;
        // Create a range and select the text
        var range = document.createRange();
        range.selectNodeContents(captionElement);
        
        // Get the selection object and remove any existing ranges
        var selection = window.getSelection();
        selection.removeAllRanges();

        // Add the new range to the selection
        selection.addRange(range);

        // Move the cursor to the end of the sentence
        range.collapse(false);

        // Set the contentEditable attribute to true after the selection
        captionElement.contentEditable = 'true';

        // Focus on the caption element
        captionElement.focus();
      } else {
        imageElement.src = editIconPath;
        captionElement.contentEditable = 'false';
        const newCaption = captionElement.innerHTML;
        fetch('/edit-caption', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ postId: postId, newCaption: newCaption }),
        });
      }
    }

    function handleRemovePost(postId) {
      var userChoice = window.confirm('Are you sure you want to delete this post?');

      if (userChoice) {
        fetch('/delete-post', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ postId: postId }),
        });

        document.location.reload();
      } else {
        // User clicked Cancel
        // alert('Removal canceled.');
      }
    }
  </script>
</body>
</html>
